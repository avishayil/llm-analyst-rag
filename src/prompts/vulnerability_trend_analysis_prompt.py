from langchain.prompts.prompt import PromptTemplate


class VulnerabilityTrendAnalysisPrompt:
    def __init__(self) -> None:
        self.examples: str = self._load_examples()
        self.system_prompt: str = self._load_system_prompt()
        self.guidelines: str = self._load_guidelines()

    def _load_examples(self) -> str:
        examples: str = """
        Here is an example of a trend analysis request and the expected output:
        <example>
            <input>
                <criteria>SQL Injection vulnerabilities in Apache Server</criteria>
                <context>
                    CVE Data:
                    - CVE-2023-12345: Improper input validation allows SQL Injection (Published: 2023-01-10, Severity: Critical)
                    - CVE-2023-67890: Lack of parameterized queries leads to SQL Injection (Published: 2023-06-15, Severity: High)
                </context>
            </input>
            <output>
                <trend>
                    <summary>
                        SQL Injection vulnerabilities in Apache Server increased in 2023, peaking in June. Critical issues accounted for 60% of the cases.
                    </summary>
                </trend>
            </output>
        </example>
        """
        return examples

    def _load_user_prompt(self, criteria: str) -> str:
        user_prompt: str = f"""Based on the following criteria and context, analyze trends and provide a summary:
        <input>
            <criteria>{criteria}</criteria>
            <context>{{context}}</context>
        </input>
        Please provide the output in the following XML format:
        <output>
            <trend>
                <summary></summary>
            </trend>
        </output>
        """
        return user_prompt

    def _load_system_prompt(self) -> str:
        system_prompt: str = f"""
        - You are an expert in cybersecurity and vulnerability management.
        - Your role is to analyze trends in CVEs based on the provided criteria and additional context.
        - Use the provided context (e.g., CVE data, severity distribution, and publication trends) to enrich your analysis.
        - Summarize your findings clearly, focusing on frequency, severity distribution, and notable changes over time.
        - Ensure your output adheres to the following XML format and structure:
        <examples>
            {self.examples}
        </examples>
        """
        return system_prompt

    def _load_guidelines(self) -> str:
        guidelines: str = """
        - Follow these guidelines:
        <guidelines>
            a. Summarize trends based on the criteria and provided context.
            b. Use the context to extract insights (e.g., category frequency, severity distribution, and publication trends).
            c. Avoid speculative or generic insights; focus on trends derived from the provided context.
            d. Ensure the summary is concise, precise, and relevant to the criteria. Limit the summary to 100 words maximum.
            e. Ensure the output is clear, structured, and adheres to the XML format. You must always return valid XML format. Do not return any additional text.
        </guidelines>
        """
        return guidelines

    def prompt_builder(
        self,
        criteria: str,
    ) -> PromptTemplate:
        """
        Populates the vulnerability trend analysis prompt with the given parameters.

        :param criteria: Analysis criteria (e.g., category, product, or vendor).
        :param context: Additional context (e.g., CVE data, severity, or trends).
        :return: A populated PromptTemplate instance.
        """
        prompt = PromptTemplate(
            input_variables=[
                "context",
            ],
            template=f"""
            {self.system_prompt}\n
            {self.guidelines}\n
            {self._load_user_prompt(criteria=criteria)}\n
            """,
        )
        return prompt
